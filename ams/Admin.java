/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ams;
import java.util.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.UIManager.getString;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kushagra
 */
public class Admin extends javax.swing.JFrame {

    
   public Connection con;
   public Login lg;
    /**
     * Creates new form Admin
     */
   public Admin(){
       initComponents();
   }
    public Admin(Connection co, Login l) {
        initComponents();
        con = co;
        lg = l;
        
        DefaultTableModel tableModel = (DefaultTableModel) jXTable3.getModel();
        tableModel.setColumnIdentifiers(new String[]{
            "Flight ID", "Name" , "PlaneID" , "RouteID" , "Date" 
        });
        tableModel.setRowCount(0);
        jXTable3.setModel(tableModel);
        try{
        ArrayList<String> str = new ArrayList<>();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select name from cities");
            int i = 0;
            str.add("   --    ");
            i++;
            while(rs.next()) {
                str.add(rs.getString(1));
                i++;
            }
            
            from.setModel(new javax.swing.DefaultComboBoxModel(str.toArray()));
            to.setModel(new javax.swing.DefaultComboBoxModel(str.toArray()));
        } catch(SQLException ex){
             Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
          }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        from = new javax.swing.JComboBox();
        to = new javax.swing.JComboBox();
        btn_getOccupancy = new javax.swing.JButton();
        btn_modify_flight = new javax.swing.JButton();
        btn_create_flight = new javax.swing.JButton();
        btn_logout = new javax.swing.JButton();
        btn_getProfit = new javax.swing.JButton();
        btn_remove_flight = new javax.swing.JButton();
        datefrom = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable3 = new org.jdesktop.swingx.JXTable();
        dateto = new org.jdesktop.swingx.JXDatePicker();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        btn_newAirplane = new javax.swing.JButton();
        btn_newRoute = new javax.swing.JButton();
        btn_getflights = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "AMS Management", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18))); // NOI18N
        jPanel2.setToolTipText("");

        jLabel1.setText("From:");

        jLabel2.setText("To:");

        jLabel3.setText("Period:");

        from.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        from.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromActionPerformed(evt);
            }
        });

        to.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        to.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toActionPerformed(evt);
            }
        });

        btn_getOccupancy.setText("Get Occupancy Rate");
        btn_getOccupancy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getOccupancyActionPerformed(evt);
            }
        });

        btn_modify_flight.setText("Modify Flight");
        btn_modify_flight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modify_flightActionPerformed(evt);
            }
        });

        btn_create_flight.setText("Create Flight");
        btn_create_flight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_create_flightActionPerformed(evt);
            }
        });

        btn_logout.setText("Logout");
        btn_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_logoutActionPerformed(evt);
            }
        });

        btn_getProfit.setText("Get Profit");
        btn_getProfit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getProfitActionPerformed(evt);
            }
        });

        btn_remove_flight.setText("Remove Flight");
        btn_remove_flight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_remove_flightActionPerformed(evt);
            }
        });

        datefrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datefromActionPerformed(evt);
            }
        });

        jXTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jXTable3);

        dateto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datetoActionPerformed(evt);
            }
        });

        btn_newAirplane.setText("Add new Airplane");
        btn_newAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newAirplaneActionPerformed(evt);
            }
        });

        btn_newRoute.setText("Add new Route");
        btn_newRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newRouteActionPerformed(evt);
            }
        });

        btn_getflights.setText("Get Flights");
        btn_getflights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getflightsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1)
                .addGap(12, 12, 12))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(btn_newAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btn_newRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datefrom, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dateto, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_getProfit, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(btn_modify_flight, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_remove_flight, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_create_flight, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_getflights, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_getOccupancy, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {datefrom, from});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_create_flight, btn_modify_flight, btn_remove_flight});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datefrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btn_getProfit)
                    .addComponent(btn_logout))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_newAirplane)
                    .addComponent(btn_newRoute))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_getOccupancy))
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_create_flight)
                    .addComponent(btn_modify_flight)
                    .addComponent(btn_remove_flight)
                    .addComponent(btn_getflights))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void datetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datetoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datetoActionPerformed

    private void datefromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datefromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datefromActionPerformed

    private void btn_remove_flightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_remove_flightActionPerformed
        int index = jXTable3.getSelectedRow();
        if(index<0){
            JOptionPane.showMessageDialog(this, "Select a flight first");
            return;
        }
        String id = String.valueOf(jXTable3.getValueAt(index, 0));
        String id2 = "";
        String name = String.valueOf(jXTable3.getValueAt(index, 1));
        String planeid1 = String.valueOf(jXTable3.getValueAt(index, 2));
        String routeid1 = String.valueOf(jXTable3.getValueAt(index, 3));
        String routeid2 = "";
        int q = JOptionPane.showConfirmDialog(this,"Confirm Deletion?","AMS",JOptionPane.YES_NO_OPTION);
        if(q == 0){
            System.out.println("-------hhj------");
                try{
                String sql = "SELECT bookinglist FROM flight WHERE id='"+id+"'";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                if(rs.next()){
                    ArrayList<String> bookings = new ArrayList<>(Arrays.asList(rs.getString("bookinglist").split(" ")));
                    System.out.println(bookings);
                    for(int i=0;i<bookings.size();i++){
                         System.out.println("yes yes yes");
                        String qry = "UPDATE booking SET status = 'c', fare = 0  WHERE id ='"+bookings.get(i)+"'";
                        Statement stat = con.createStatement();
                        stat.executeUpdate(qry);
                    }
                }
                sql = "SELECT bookinglist FROM flight WHERE id='"+id2+"'";
                rs = st.executeQuery(sql);
                if(rs.next()){
                    ArrayList<String> bookings = new ArrayList<>(Arrays.asList(rs.getString("bookinglist").split(" ")));
                    System.out.println(bookings);
                    for(int i=0;i<bookings.size();i++){
                        System.out.println("yes yes yes");
                        String qry = "UPDATE booking SET status = 'c', fare = 0 WHERE id ='"+bookings.get(i)+"'";
                        Statement stat = con.createStatement();
                        stat.executeUpdate(qry);
                    }
                }
                }catch(Exception ex){
                    
                }
            //onward flight delete
            String sql = "DELETE FROM flight WHERE id = '" +id+"'" ;
            Statement st;
            try {
                st = con.createStatement();
                st.executeUpdate(sql);
            
            
                sql = "SELECT * FROM flight WHERE (id = '" +(Integer.parseInt(id)+1)+"' OR '"+(Integer.parseInt(id)-1)+"') AND name ='"+name+"'" ;
                st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                if(rs.next()){
                    if(rs.getString("name").equals(name) && rs.getString("planeID").equals(planeid1)){
                        id2 = rs.getString("id");
                        routeid2 = rs.getString("routeID");
                    }
                    else{ 
                        rs.next();
                        if(rs.getString("name").equals(name) && rs.getString("planeID").equals(planeid1)){
                            id2 = rs.getString("id");
                            routeid2 = rs.getString("routeID");
                        }
                    }    
                }
                //return flight delete
                sql = "DELETE FROM flight WHERE id = '" +id2+"'" ;
                st.executeUpdate(sql);
                
                sql = "SELECT flightlist FROM plane WHERE id = '"+planeid1+"'";
                rs = st.executeQuery(sql);
                if(rs.next()){
                    ArrayList<String> ftlist = new ArrayList<>(Arrays.asList(rs.getString("flightlist").split(" ")));
                    ftlist.remove(id);
                    ftlist.remove(id2);
                    String flist = "";
                    for(int i= 0; i< ftlist.size();i++){
                        if(i!=ftlist.size()-1)
                            flist += ftlist.get(i)+" ";
                        else
                            flist += ftlist.get(i);
                    }
                    //update flightlist of plane
                    sql = "UPDATE plane SET flightlist = '"+flist+"' WHERE id ='"+planeid1+"'";
                    st.executeUpdate(sql);
                }
                
                sql = "SELECT flightlist FROM route WHERE id = '"+routeid1+"'";
                rs = st.executeQuery(sql);
                if(rs.next()){
                    ArrayList<String> ftlist = new ArrayList<>(Arrays.asList(rs.getString("flightlist").split(" ")));
                    ftlist.remove(id);
                    String flist = "";
                    for(int i= 0; i< ftlist.size();i++){
                        if(i!=ftlist.size()-1)
                            flist += ftlist.get(i)+" ";
                        else
                            flist += ftlist.get(i);
                    }
                    sql = "UPDATE route SET flightlist = '"+flist+"' WHERE id ='"+routeid1+"'";
                    st.executeUpdate(sql); 
                                 
                }
                sql = "SELECT flightlist FROM route WHERE id = '"+routeid2+"'";
                rs = st.executeQuery(sql);
                if(rs.next()){
                    ArrayList<String> ftlist = new ArrayList<>(Arrays.asList(rs.getString("flightlist").split(" ")));
                    ftlist.remove(id2);
                    String flist = "";
                    for(int i= 0; i< ftlist.size();i++){
                        if(i!=ftlist.size()-1)
                            flist += ftlist.get(i)+" ";
                        else
                            flist += ftlist.get(i);
                    }
                    sql = "UPDATE route SET flightlist = '"+flist+"' WHERE id ='"+routeid2+"'";
                    st.executeUpdate(sql); 
                                 
                }
                System.out.println("-----> "+routeid1+" "+routeid2+" "+id+" "+id2);
                JOptionPane.showMessageDialog(this, "Flight Deleted");
                
                
                
                
            } catch (SQLException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        modtable();
        
    }//GEN-LAST:event_btn_remove_flightActionPerformed
    private void modtable(){
        String From = from.getSelectedItem().toString();
        String To = to.getSelectedItem().toString();
 
        if(From.equals("   --    ") || To.equals("   --    ")){
            JOptionPane.showMessageDialog(this, "Select end points first!");
            return;
        }
        try {
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from route WHERE start = '" + From + "' and dest = '"+ To +"'");
            if(rs.next()) {
//                String start = rs.getString("start");
//                String dest = rs.getString("dest");
//                String w = rs.getString("flightlist").replaceAll(" ", " OR ");
//                System.out.println(rs.getString("flightlist"));
                java.util.Date dt = new java.util.Date();
                java.sql.Date dt1 = new java.sql.Date(dt.getTime());
                String routei = rs.getString("id");
                String sql = "SELECT * FROM flight WHERE routeID = '"+routei +"' AND departure > '"+
                        dt1.toString() + "'  ORDER BY departure DESC";
                rs = st.executeQuery(sql);
               
//                String sql = "select * from flight where (id = " + w + ") AND departure > '"+
//                        dt1.toString() +"'  ORDER BY departure DESC";
                System.out.println(sql);
//                st = con.createStatement();
//                rs = st.executeQuery(sql);
                ArrayList<String> name = new ArrayList<>();
                 ArrayList<String> planeid = new ArrayList<>();
                 ArrayList<String> num = new ArrayList<>();
                ArrayList<String> depttime = new ArrayList<>();
                ArrayList<String> routeid = new ArrayList<>();

               
                while(rs.next()) {
              
                        planeid.add(rs.getString("planeID"));
                        num.add(rs.getString("id"));
                       // vacancy.add(rs.getString(clsclmn));
                        name.add(rs.getString("name"));
                        depttime.add(rs.getString("departure").split(" ")[0]);
                        routeid.add(rs.getString("routeID"));
                        //arrivtime.add(rs.getString("arrival").split(" ")[1]);
                        //fare.add(String.valueOf(Integer.parseInt(rs.getString(fareclmn)) + Integer.parseInt(rs.getString("basic"))));
                    
                }

                DefaultTableModel tableModel = (DefaultTableModel) jXTable3.getModel();

                tableModel.setRowCount(0);
               // flag = true;
                for (int i = 0; i < name.size(); i++) {
                    String[] data = new String[5];
                    data[0] = num.get(i);
                    data[1] = name.get(i);
                    data[2] = planeid.get(i);
                    data[3] = routeid.get(i);
                    data[4] = depttime.get(i);
                    tableModel.addRow(data);
                }
                jXTable3.setModel(tableModel);
                tableModel.fireTableDataChanged();
            }else{
                DefaultTableModel tableModel = (DefaultTableModel) jXTable3.getModel();
                tableModel.setRowCount(0);
                jXTable3.setModel(tableModel);
                JOptionPane.showMessageDialog(this, "No such flights available");
                return;
            }
       
        
        
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    
    private void btn_getProfitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getProfitActionPerformed
        java.sql.Date Dt1,Dt2 ;
         int Profit = 0;
            int d,cst,bsc;
            int fare=0;
        try{
            Dt1 = new java.sql.Date(datefrom.getDate().getTime());
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Choose a starting date");
            return;
        }
        try{
            Dt2 = new java.sql.Date(dateto.getDate().getTime());
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Choose a ending date");
            return;
        }
        try{
            String dt1 = Dt1.toString();
            String dt2 = Dt2.toString();
            System.out.println(dt1 + " "+ dt2);
            String sql = "SELECT * FROM flight WHERE departure >= '"+dt1+"' AND departure <= '"+dt2+"'" ;
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
           
            ArrayList<String> routes = new ArrayList<>();
            ArrayList<ArrayList<String>> bookings = new ArrayList<>();
            ArrayList<String> plane = new ArrayList<>();
            ArrayList<String> basic_cost = new ArrayList<>();
            //System.out.println("Yes");
            while(rs.next()){
                try{
                if(rs.getString("bookinglist")==null)
                    continue;
                routes.add(rs.getString("routeID"));
                plane.add(rs.getString("planeID"));
                basic_cost.add(rs.getString("basic"));
                bookings.add(new ArrayList<>(Arrays.asList(rs.getString("bookinglist").split(" "))));
                //System.out.println(rs.getString("routeID"));
                } catch(Exception e){
                    JOptionPane.showMessageDialog(this, "Some unexpected Error Occured!!");
                    return;
                }
            }
            //System.out.println("check1");
            for(int i=0;i<routes.size();i++){
                System.out.println("book = "+bookings.get(i).size());
                
                sql = "SELECT * FROM route WHERE id = '"+routes.get(i)+"'";
                st = con.createStatement();
                rs = st.executeQuery(sql);
                if(rs.next()){
                    d = Integer.parseInt(rs.getString("distance"));
                }
                else 
                    continue;
                
                sql = "SELECT cost_per_km FROM plane WHERE id = "+plane.get(i);
                st = con.createStatement();
                rs = st.executeQuery(sql);
                if(rs.next()){
                    cst = Integer.parseInt(rs.getString("cost_per_km"));
                }
                else 
                    continue;
                for(int k = 0;k<bookings.get(i).size();k++){
                    sql = "SELECT * FROM booking WHERE id = '"+bookings.get(i).get(k)+"'";
                    st = con.createStatement();
                    rs = st.executeQuery(sql);
                    if(rs.next()){
                        d = Integer.parseInt(rs.getString("fare"));
                        fare += d;
                    }
                    else 
                        continue;
                }
                Profit+=(fare-d*cst - Integer.parseInt(basic_cost.get(i)));
            }
        }catch(SQLException ex){
            System.out.println(ex);
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Net Profit = "+Profit);
    }//GEN-LAST:event_btn_getProfitActionPerformed

    private void btn_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_logoutActionPerformed
        this.dispose();
        lg.Clear();
        lg.setVisible(true);
        
    }//GEN-LAST:event_btn_logoutActionPerformed

    private void btn_create_flightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_create_flightActionPerformed
        CreateFlight cf = new CreateFlight(con,0);
        cf.setVisible(true);
    }//GEN-LAST:event_btn_create_flightActionPerformed

    private void btn_modify_flightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modify_flightActionPerformed
        int index = jXTable3.getSelectedRow();
        if(index<0){
            JOptionPane.showMessageDialog(this, "Select a flight first");
            return;
        }
        
        String id = String.valueOf(jXTable3.getValueAt(index, 0));
        String id2 = "";
        String name = String.valueOf(jXTable3.getValueAt(index, 1));
        String planeid1 = String.valueOf(jXTable3.getValueAt(index, 2));
        String routeid1 = String.valueOf(jXTable3.getValueAt(index, 3));
        
        try{
        String sql = "SELECT * FROM flight WHERE (id = '" +(Integer.parseInt(id)+1)+"' OR '"+(Integer.parseInt(id)-1)+"') AND name ='"+name+"'" ;
        Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                if(rs.next()){
                    if(rs.getString("name").equals(name) && rs.getString("planeID").equals(planeid1) && 
                            (rs.getString("routeID").equals(String.valueOf(Integer.parseInt(routeid1)+1))||
                            rs.getString("routeID").equals(String.valueOf(Integer.parseInt(routeid1)-1)))){
                        id2 = rs.getString("id");
                        }
                    else{ 
                        rs.next();
                        if(rs.getString("name").equals(name) && rs.getString("planeID").equals(planeid1) &&
                                  (rs.getString("routeID").equals(String.valueOf(Integer.parseInt(routeid1)+1))||
                            rs.getString("routeID").equals(String.valueOf(Integer.parseInt(routeid1)-1)))){
                            id2 = rs.getString("id");
                        }
                    }    
                }
        
                
        if(Integer.parseInt(id)>Integer.parseInt(id2)){
            String temp;
            temp = id;
            id = id2;
            id2 = id;
        }       
            System.out.println(id + " " + id2);
        Flight flight1 = new Flight();
        Flight flight2 = new Flight();
        sql = "SELECT * FROM flight WHERE id = '"+id+"'";
        rs = st.executeQuery(sql);
        if(rs.next()){
            flight1.setArrival(rs.getString("arrival"));
            flight1.setBasic_cost(rs.getString("basic"));
            flight1.setBookinglist(rs.getString("bookinglist"));
            flight1.setDeparture(rs.getString("departure"));
            flight1.setFare_b(rs.getString("fare_b"));
            flight1.setFare_e(rs.getString("fare_e"));
            flight1.setFare_f(rs.getString("fare_e"));
            flight1.setName(rs.getString("name"));
            flight1.setPlaneid(rs.getString("planeID"));
            flight1.setRouteid(rs.getString("RouteID"));
            flight1.setVac_b(rs.getString("vac_b"));
            flight1.setVac_f(rs.getString("vac_f"));
            flight1.setVac_e(rs.getString("vac_e"));
            flight1.setId(rs.getString("id"));
        }
        
        sql = "SELECT * FROM flight WHERE id = '"+id2+"'";
        rs = st.executeQuery(sql);
        if(rs.next()){
            flight2.setArrival(rs.getString("arrival"));
            flight2.setBasic_cost(rs.getString("basic"));
            flight2.setBookinglist(rs.getString("bookinglist"));
            flight2.setDeparture(rs.getString("departure"));
            flight2.setFare_b(rs.getString("fare_b"));
            flight2.setFare_e(rs.getString("fare_e"));
            flight2.setFare_f(rs.getString("fare_e"));
            flight2.setName(rs.getString("name"));
            flight2.setPlaneid(rs.getString("planeID"));
            flight2.setRouteid(rs.getString("RouteID"));
            flight2.setVac_b(rs.getString("vac_b"));
            flight2.setVac_f(rs.getString("vac_f"));
            flight2.setVac_e(rs.getString("vac_e"));
            flight2.setId(rs.getString("id"));
        }
       
        

        CreateFlight cf = new CreateFlight(con,1,flight1,flight2);
        cf.setVisible(true);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, "This flight can't be modified!");
        }
    }//GEN-LAST:event_btn_modify_flightActionPerformed

    private void btn_getOccupancyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getOccupancyActionPerformed
        String strt = from.getSelectedItem().toString();
        String fin = to.getSelectedItem().toString();
        if(strt.equals("   --    ")||fin.equals("   --    ")){
            JOptionPane.showMessageDialog(this, "Please Select the end points first");
            return;
        }

        try{
            Statement st = con.createStatement();
            System.out.println(strt);
            String sql = "SELECT id FROM route WHERE start = '"+strt
                    +"' AND dest = '" + fin+"'";
            System.out.println(sql);
            ResultSet rs = st.executeQuery(sql) ;
            String id1,id2;
            if(rs.next()){
               id1 = rs.getString("id");
            }
            else{
                JOptionPane.showMessageDialog(this, "This route doesn't exist!");
                return;
            }
            rs = st.executeQuery("Select id FROM route WHERE start = '"+ fin
                    +"' AND dest = '" + strt + "'") ;
            if(rs.next()){
               id2 = rs.getString("id");
            }
            else{
                JOptionPane.showMessageDialog(this, "Some error occured2!!");
                return;
            }
            System.out.println(id1+" "+id2);
            Statement st1 = con.createStatement();
            java.util.Date tday = new java.util.Date();
            java.sql.Date dt = new java.sql.Date(tday.getTime());
            sql = "SELECT * FROM flight WHERE (routeID = '"
                    +id1+"' OR  routeID = '"+id2+"') AND departure < '"
                    +dt.toString()+"'  ORDER BY departure DESC LIMIT 50";
            //System.out.println(sql);
            ResultSet rs1 = st1.executeQuery(sql);
//            while(rs1.next()){
//                System.out.println(rs1.getString("id"));
//            }
            int tot_cap = 0;
            int tot_vac = 0;
            if(!rs1.next()){
                JOptionPane.showMessageDialog(this, "No past flight exists on this route!");
                return;
            }
            while(rs1.next()){
                int planeid = Integer.parseInt(rs1.getString("planeID"));
                Statement st2 = con.createStatement();
                String sql2 = "SELECT * FROM plane WHERE id = "+planeid;
                //System.out.println(sql2);
                ResultSet rs2 = st2.executeQuery(sql2);
                int capacity = 0;
                if(rs2.next()){
                    capacity = Integer.parseInt(rs2.getString("capacity_f"));
                    capacity += Integer.parseInt(rs2.getString("capacity_b"));
                    capacity += Integer.parseInt(rs2.getString("capacity_e"));
                    //System.out.println("->"+capacity);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Some error occured3!!");
                    return;
                }
                tot_cap += capacity;
                tot_vac += Integer.parseInt(rs1.getString("vac_f"));
                tot_vac += Integer.parseInt(rs1.getString("vac_b"));
                tot_vac += Integer.parseInt(rs1.getString("vac_e"));
                System.out.println(tot_cap + " " + tot_vac);
            }

            System.out.println(tot_cap);
            JOptionPane.showMessageDialog(this, "The latest Occupancy Rate on this Route has been "
                    +((tot_cap - tot_vac)*100/tot_cap) + "%");
            return;
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "Some unexpected Error Occured4!!");
        }
            
    }//GEN-LAST:event_btn_getOccupancyActionPerformed

    private void toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toActionPerformed

    private void fromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromActionPerformed

    private void btn_newRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newRouteActionPerformed
        Create_route rout = new Create_route(con);
        rout.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_newRouteActionPerformed

    private void btn_newAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newAirplaneActionPerformed
        Create_airplane pln = new Create_airplane(con);
        pln.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_newAirplaneActionPerformed

    private void btn_getflightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getflightsActionPerformed
       modtable();
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_getflightsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_create_flight;
    private javax.swing.JButton btn_getOccupancy;
    private javax.swing.JButton btn_getProfit;
    private javax.swing.JButton btn_getflights;
    private javax.swing.JButton btn_logout;
    private javax.swing.JButton btn_modify_flight;
    private javax.swing.JButton btn_newAirplane;
    private javax.swing.JButton btn_newRoute;
    private javax.swing.JButton btn_remove_flight;
    private javax.swing.ButtonGroup buttonGroup1;
    private org.jdesktop.swingx.JXDatePicker datefrom;
    private org.jdesktop.swingx.JXDatePicker dateto;
    private javax.swing.JComboBox from;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private org.jdesktop.swingx.JXTable jXTable3;
    private javax.swing.JComboBox to;
    // End of variables declaration//GEN-END:variables
}
